package cl.intelidata.amicar.componente;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cl.intelidata.amicar.bd.Clientes;
import cl.intelidata.amicar.bd.ConsultasDB;
import cl.intelidata.amicar.bd.Ejecutivos;
import cl.intelidata.amicar.bd.Locales;
import cl.intelidata.amicar.bd.Proceso;
import cl.intelidata.amicar.bd.Vendedores;
import cl.intelidata.amicar.beans.Archivo;
import cl.intelidata.amicar.beans.Datos;
//import cl.intelidata.amicar.db.ConsultasDB;
import cl.intelidata.amicar.referencias.Texto;
import cl.intelidata.conf.Configuracion;

public class Procesa {

	/*******************************************************************************************************/
	/********************************************** Atributos **********************************************/
	/*******************************************************************************************************/

	protected String strRutaEntrada;
	protected String strRutaSalida;
	protected String strNombreArchivoEntrada;
	protected boolean esArchivoDiario = false;
	protected boolean esArchivoMensual = false;
	protected Timestamp fechaActual;
	protected List<Proceso> procesosEnvio = new ArrayList<Proceso>();
	// Log
	private static Logger logger = LoggerFactory.getLogger(Procesa.class);

	/*******************************************************************************************************/
	/******************************************** Constructores ********************************************/
	/*******************************************************************************************************/

	public Procesa(String strRutaEntrada, String strRutaSalida, String strNombreArchivoEntrada) {
		this.strRutaEntrada = strRutaEntrada;
		this.strRutaSalida = strRutaSalida;
		this.strNombreArchivoEntrada = strNombreArchivoEntrada;
	}

	/*******************************************************************************************************/
	/*********************************************** Metodos ***********************************************/
	/*******************************************************************************************************/

	public void cargaData() {
		Archivo archivo = new Archivo(this.strRutaEntrada, this.strRutaSalida);
		System.out.println("Leyendo el archivo " + this.strNombreArchivoEntrada);
		List<String> datos = archivo.leer(this.strNombreArchivoEntrada, null);
		this.fijarTipoArchivo(archivo.getStrPrimeraLinea());
		if (this.esArchivoDiario) {
			this.cargarArchivoDiario(datos);
		} else if (this.esArchivoMensual) {
			this.cargarArchivoMensual(datos);
		}
	}

	/*******************************************************************************************************/

	private void cargarArchivoMensual(List<String> datos) {
		try {
			System.out.println("Procesando archivo mensual...");
			for (String s : datos) {
				if (this.lineaValida(s, false)) {
					System.out.println("Procesando: " + s);
					this.setFechaActual();
					Datos dato = new Datos(s);
					// Local
					Locales local = this.crearLocal(dato.extraer(Texto.A_M_LOCAL));
					// Ejecutivos
					this.crearEjecutivo(dato, local);
				}
			}
			System.out.println("Archivo mensual procesado con exito...");
			System.out.println("**********************************************************************************************");
		} catch (Exception e) {
			this.error(e);
		}
	}

	/*******************************************************************************************************/

	private void cargarArchivoDiario(List<String> datos) {
		try {
			System.out.println("Procesando archivo diario...");
			for (String s : datos) {
				if (this.lineaValida(s, true)) {
					System.out.println("Procesando: " + s);
					Datos dato = new Datos(s);
					Clientes cliente = this.crearCliente(dato);
					Vendedores vendedor = this.crearVendedor(dato);
					if (this.existeLocal(dato.extraer(Texto.A_D_NOMBRE_LOCAL))) {
						this.asignarProceso(cliente, vendedor);
					}
				}
			}
			System.out.println("Archivo diario procesado con exito...");
			System.out.println("**********************************************************************************************");
			System.out.println("Generando archivo emmesaging...");
			Mail mails = new Mail(Configuracion.getInstance().getInitParameter("SalidaEmmesaging"));
			mails.clientes(this.procesosEnvio);
			System.out.println("Archivo emmesaging generado existosamente...");

		} catch (Exception e) {
			this.error(e);
		}
	}

	/*******************************************************************************************************/

	/**
	 * Verifica el tipo de archivo que se esta manipulando, segun la primera
	 * linea de este
	 * 
	 * @param strPrimeraLinea
	 *            Primera linea del archivo.
	 */
	private void fijarTipoArchivo(String strPrimeraLinea) {
		try {
			if (strPrimeraLinea.toLowerCase().equals(Texto.CABECERA_ARCHIVO_DIARIO.toLowerCase())) {
				this.esArchivoDiario = true;
			} else if (strPrimeraLinea.toLowerCase().equals(Texto.CABECERA_ARCHIVO_MENSUAL.toLowerCase())) {
				this.esArchivoMensual = true;
			} else {
				System.out.println("El archivo ingresado no es valido.");
				System.exit(1);
			}
		} catch (Exception e) {
			this.error(e);
		}
	}

	/*******************************************************************************************************/

	private void guardarLocal(Locales local) {
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			consultasDB.saveLocal(local);
		} catch (Exception e) {
			this.error(e);
		}
	}

	/*******************************************************************************************************/

	private void guardarEjecutivo(Ejecutivos ejecutivo) {
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			consultasDB.saveEjecutivo(ejecutivo);
		} catch (Exception e) {
			this.error(e);
		}
	}

	/*******************************************************************************************************/

	private void guardarCliente(Clientes cliente) {
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			consultasDB.saveCliente(cliente);
		} catch (Exception e) {
			this.error(e);
		}
	}

	/*******************************************************************************************************/

	private void guardarVendedor(Vendedores vendedor) {
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			consultasDB.saveVendedor(vendedor);
		} catch (Exception e) {
			this.error(e);
		}
	}

	/*******************************************************************************************************/

	private void asignarProceso(Clientes cliente, Vendedores vendedor) {
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			Proceso proceso = new Proceso();
			this.setFechaActual();
			Ejecutivos ejecutivo = consultasDB.buscarEjecutivoVigentePorLocal(vendedor.getLocales().getNombreLocal());
			proceso.setClientes(cliente);
			proceso.setVendedores(vendedor);
			proceso.setFechaEnvio(this.fechaActual);
			if (ejecutivo != null) {
				proceso.setEjecutivos(ejecutivo);
				consultasDB.saveProceso(proceso);
				this.procesosEnvio.add(proceso);
				logger.info("Mail id: " + proceso.getIdProceso() + " cliente id: " + proceso.getClientes().getRutCliente() + " ejecutivo id: " + proceso.getEjecutivos().getIdEjecutivo()
						+ "  vendedor id: " + proceso.getVendedores().getIdVendedor() + " fecha envio: " + proceso.getFechaEnvio());
			}
		} catch (Exception e) {
			this.error(e);
			logger.info("Error al enviar el email\n Causado por:\n" + e.getMessage());
		}
	}

	/*******************************************************************************************************/

	private Locales crearLocal(String strLocal) {
		Locales local = null;
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			local = consultasDB.buscarLocalPorDescripcion(strLocal);
			if (local == null) {
				local = new Locales();
				local.setNombreLocal(strLocal);
				this.guardarLocal(local);
			}

		} catch (Exception e) {
			this.error(e);
		}

		return local;
	}

	/*******************************************************************************************************/

	private void crearEjecutivo(Datos dato, Locales local) {
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			Ejecutivos ejecutivo = consultasDB.buscarEjecutivoPorEmail(dato.extraer(Texto.A_M_CORREO_EJECUTIVO));
			if (ejecutivo == null) {
				ejecutivo = new Ejecutivos();
				ejecutivo.setNombreEjecutivo(dato.extraer(Texto.A_M_EJECUTIVO));
				ejecutivo.setCorreoEjecutivo(dato.extraer(Texto.A_M_CORREO_EJECUTIVO));
				ejecutivo.setLocales(local);
				ejecutivo.setFechaIngreso(this.fechaActual);
				this.guardarEjecutivo(ejecutivo);
			}
		} catch (Exception e) {
			this.error(e);
		}
	}

	/*******************************************************************************************************/

	private Clientes crearCliente(Datos dato) {
		Clientes cliente = null;
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			cliente = consultasDB.buscarClientePorRut(dato.extraer(Texto.A_D_RUT_CLIENTE));
			if (cliente == null) {
				cliente = new Clientes();
				cliente.setRutCliente(dato.extraer(Texto.A_D_RUT_CLIENTE));
				cliente.setEmailCliente(dato.extraer(Texto.A_D_CORREO_CLIENTE));
				this.guardarCliente(cliente);
			}
		} catch (Exception e) {
			this.error(e);
		}
		return cliente;
	}

	/*******************************************************************************************************/

	private Vendedores crearVendedor(Datos dato) {
		Vendedores vendedor = null;
		try {
			ConsultasDB consultasDB = new ConsultasDB();
			vendedor = consultasDB.buscarVendedorPorRut(dato.extraer(Texto.A_D_RUT_VENDEDOR));
			if (vendedor == null) {
				vendedor = new Vendedores();
				vendedor.setNombreVendedor(dato.extraer(Texto.A_D_NOMBRE_VENDEDOR));
				vendedor.setRutVendedor(dato.extraer(Texto.A_D_RUT_VENDEDOR));
				vendedor.setLocales(this.crearLocal(dato.extraer(Texto.A_D_NOMBRE_LOCAL)));
				this.guardarVendedor(vendedor);
			}
		} catch (Exception e) {
			this.error(e);
		}
		return vendedor;
	}

	/*******************************************************************************************************/
	private boolean existeLocal(String strLocal) {
		boolean respuesta = false;
		ConsultasDB consultasDB = new ConsultasDB();
		Locales local = consultasDB.buscarLocalPorDescripcion(strLocal);
		if (local != null) {
			respuesta = true;
		}
		return respuesta;
	}

	/*******************************************************************************************************/
	private boolean lineaValida(String strLinea, boolean esDiario) {
		boolean respuesta = false;
		Datos datos = new Datos(strLinea);
		String s = "";
		if (esDiario) {
			s = datos.extraer(Texto.A_D_CORREO_CLIENTE);
		} else {
			s = datos.extraer(Texto.A_M_CORREO_EJECUTIVO);
		}
		if (s.contains("@") && s.contains(".") && (s.length() > 8)) {
			respuesta = true;
		}
		return respuesta;
	}

	/*******************************************************************************************************/

	private void error(Exception e) {
		e.printStackTrace();
		System.exit(1);
	}

	/*******************************************************************************************************/

	private void setFechaActual() {
		Date date = new Date();
		this.fechaActual = new Timestamp(date.getTime());
	}
	/*******************************************************************************************************/

}
